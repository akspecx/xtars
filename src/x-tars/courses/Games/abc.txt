import React, { useState, useEffect, useRef } from 'react';

// Define the shape of our game data for better type safety
interface TransactionItem {
  text: string;
  isCorrect: boolean;
  value: number; // Added to store the numeric value
}

interface Instruction {
  id: string;
  text: string;
  description: string;
  draggableValue: string;
  correctDrops: {
    assets: string[];
    liabilities: string[];
    equity: string[];
  };
  dropped?: {
    assets?: TransactionItem[];
    liabilities?: TransactionItem[];
    equity?: TransactionItem[];
  };
  isCompleted: boolean;
}

const translations = {
  en: {
    instructionTitle: "Transaction:",
    initialInstruction: "Click 'Start Game' to begin!",
    assets: "Assets",
    liabilities: "Liabilities",
    equity: "Equity",
    correct: "Correct!",
    incorrect: "Incorrect!",
    score: "Score:",
    time: "Time:",
    timerExpired: "Time's up!",
    dragValuesHere: "Drag values here",
    description: "Description",
    totalAssets: "Total Assets",
    totalLiabilities: "Total Liabilities",
    totalEquity: "Total Equity",
    endOfGame: "Game Over! Your final score is: ",
    cumulativeTotals: "Cumulative Totals",
    equationBalanced: "Equation is Balanced. You Won!",
    equationNotBalanced: "Equation is Not Balanced. You Lost!",
    congratulations: "Congratulations!",
    failed: "Failed!"
  },
  es: {
    instructionTitle: "Transacción:",
    initialInstruction: "¡Haz clic en 'Empezar' para comenzar!",
    assets: "Activos",
    liabilities: "Pasivos",
    equity: "Patrimonio",
    correct: "¡Correcto!",
    incorrect: "¡Incorrecto!",
    score: "Puntuación:",
    time: "Tiempo:",
    timerExpired: "¡Se acabó el tiempo!",
    dragValuesHere: "Arrastre los valores aquí",
    description: "Descripción",
    totalAssets: "Total de Activos",
    totalLiabilities: "Total de Pasivos",
    totalEquity: "Total de Patrimonio",
    endOfGame: "¡Juego terminado! Tu puntuación final es: ",
    cumulativeTotals: "Totales Acumulados",
    equationBalanced: "La ecuación está equilibrada. ¡Ganaste!",
    equationNotBalanced: "La ecuación no está equilibrada. ¡Perdiste!",
    congratulations: "¡Felicidades!",
    failed: "¡Fallado!"
  },
  fr: {
    instructionTitle: "Transacción:",
    initialInstruction: "Cliquez sur 'Commencer' pour démarrer !",
    assets: "Actifs",
    liabilities: "Passifs",
    equity: "Capitaux Propres",
    correct: "Correct !",
    incorrect: "Incorrect !",
    score: "Score :",
    time: "Temps :",
    timerExpired: "Le temps est écoulé !",
    dragValuesHere: "Faites glisser les valeurs ici",
    description: "La description",
    totalAssets: "Total des Actifs",
    totalLiabilities: "Total des Passifs",
    totalEquity: "Total des Capitaux Propres",
    endOfGame: "Jeu terminé ! Votre score final est : ",
    cumulativeTotals: "Totaux Cumulatifs",
    equationBalanced: "L'équation est équilibrée. Vous avez gagné!",
    equationNotBalanced: "L'équation n'est pas équilibrée. Vous avez perdu!",
    congratulations: "Félicitations!",
    failed: "Échoué!"
  }
};

const App = () => {
  // --- State Management ---
  const [currentLanguage, setCurrentLanguage] = useState('en');
  const [score, setScore] = useState(0);
  const [timer, setTimer] = useState(10);
  const [isGameRunning, setIsGameRunning] = useState(false);
  const [currentInstructionIndex, setCurrentInstructionIndex] = useState(-1);
  const [instructions, setInstructions] = useState<Instruction[]>([]);
  const [toastMessage, setToastMessage] = useState({ text: '', isCorrect: false, points: 0, visible: false });
  const [draggedItemId, setDraggedItemId] = useState<string | null>(null);
  const TIMER_DURATION = 10;
  const timerIntervalRef = useRef<number | undefined>(undefined);

  // --- Effects ---
  useEffect(() => {
    // Load initial instructions with descriptive text
    const loadedInstructions: Instruction[] = [
      {
        id: "tx-1",
        description: "Company buys a machinery with a loan.",
        text: "Company buys a machinery worth 50000 by taking a loan from a bank.",
        draggableValue: "50000",
        correctDrops: {
          assets: ["Machinery (+50000)"],
          liabilities: ["Bank Loan (+50000)"],
          equity: []
        },
        dropped: { assets: [], liabilities: [], equity: [] },
        isCompleted: false,
      },
      {
        id: "tx-2",
        description: "Company sells old inventory.",
        text: "Company sells old inventory for 10000 cash.",
        draggableValue: "10000",
        correctDrops: {
          assets: ["Cash (+10000)"],
          liabilities: [],
          equity: []
        },
        dropped: { assets: [], liabilities: [], equity: [] },
        isCompleted: false,
      },
      {
        id: "tx-3",
        description: "Company issues new shares.",
        text: "Company issues 20000 in new shares to an investor.",
        draggableValue: "20000",
        correctDrops: {
          assets: ["Cash (+20000)"],
          liabilities: [],
          equity: ["Share Capital (+20000)"]
        },
        dropped: { assets: [], liabilities: [], equity: [] },
        isCompleted: false,
      },
      {
        id: "tx-4",
        description: "Company repays bank loan.",
        text: "Company repays 5000 of its bank loan.",
        draggableValue: "5000",
        correctDrops: {
          assets: ["Cash (-5000)"],
          liabilities: ["Bank Loan (-5000)"],
          equity: []
        },
        dropped: { assets: [], liabilities: [], equity: [] },
        isCompleted: false,
      }
    ];
    setInstructions(loadedInstructions);
  }, []);

  // Timer effect
  useEffect(() => {
    if (currentInstructionIndex > -1 && isGameRunning && timer > 0) {
      timerIntervalRef.current = window.setInterval(() => {
        setTimer(prevTimer => prevTimer - 1);
      }, 1000);
      return () => clearInterval(timerIntervalRef.current);
    }
    if (timer === 0 && isGameRunning && currentInstructionIndex > -1) {
      handleTimerExpired();
    }
    return () => clearInterval(timerIntervalRef.current);
  }, [currentInstructionIndex, timer, isGameRunning]);

  // Toast message effect
  useEffect(() => {
    if (toastMessage.visible) {
      const toastTimer = setTimeout(() => {
        setToastMessage(prev => ({ ...prev, visible: false }));
      }, 3000);
      return () => clearTimeout(toastTimer);
    }
  }, [toastMessage.visible]);

  // --- Game Logic Functions ---
  const startGame = () => {
    if (isGameRunning) return;
    setIsGameRunning(true);
    setScore(0);
    setCurrentInstructionIndex(0);
    // Reset all instructions dropped state
    const resetInstructions = instructions.map(inst => ({
      ...inst,
      dropped: { assets: [], liabilities: [], equity: [] },
      isCompleted: false
    }));
    setInstructions(resetInstructions);
    setTimer(TIMER_DURATION);
  };

  const nextTransaction = () => {
    if (currentInstructionIndex + 1 < instructions.length) {
      setCurrentInstructionIndex(currentInstructionIndex + 1);
      setTimer(TIMER_DURATION);
    } else {
      endGame();
    }
  };

  const endGame = () => {
    setIsGameRunning(false);
    if (timerIntervalRef.current) {
        clearInterval(timerIntervalRef.current);
    }
  };

  const handleTimerExpired = () => {
    setScore(prevScore => prevScore - 5);
    setToastMessage({ text: translations[currentLanguage].timerExpired, isCorrect: false, points: -5, visible: true });
    endGame(); // End the game immediately on timer expiry
  };

  const showToast = (message: string, isCorrect: boolean, points: number) => {
    setToastMessage({ text: message, isCorrect, points, visible: true });
  };

  const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    if (!isGameRunning) return;

    const currentInstruction = instructions[currentInstructionIndex];
    if (!currentInstruction) return;

    const targetZone = e.currentTarget.dataset.zone as 'assets' | 'liabilities' | 'equity';
    const droppedValue = parseFloat(currentInstruction.draggableValue);

    const isCorrect = currentInstruction.correctDrops[targetZone].some(correctDrop => {
      const dropValue = parseFloat(correctDrop.match(/([+-]?\d+)/)?.[1] || '0');
      return Math.abs(dropValue) === droppedValue;
    });

    const points = isCorrect ? 10 : -5;
    setScore(prevScore => prevScore + points);
    showToast(isCorrect ? translations[currentLanguage].correct : translations[currentLanguage].incorrect, isCorrect, points);

    const updatedInstructions = [...instructions];
    const instructionToUpdate = updatedInstructions[currentInstructionIndex];

    if (instructionToUpdate) {
      const droppedItemText = isCorrect
        ? currentInstruction.draggableValue
        : `Incorrect Drop: ${currentInstruction.draggableValue}`;

      const newDroppedItem: TransactionItem = { text: droppedItemText, isCorrect, value: isCorrect ? droppedValue : 0 };

      if (!instructionToUpdate.dropped) {
        instructionToUpdate.dropped = { assets: [], liabilities: [], equity: [] };
      }
      instructionToUpdate.dropped[targetZone]?.push(newDroppedItem);
      
      setInstructions(updatedInstructions);
    }

    // Check if all required drops for the current instruction have been made
    const isAssetsDropRequired = currentInstruction.correctDrops.assets.length > 0;
    const isLiabilitiesDropRequired = currentInstruction.correctDrops.liabilities.length > 0;
    const isEquityDropRequired = currentInstruction.correctDrops.equity.length > 0;

    const hasAssetsDropped = (instructionToUpdate?.dropped?.assets?.length || 0) === currentInstruction.correctDrops.assets.length;
    const hasLiabilitiesDropped = (instructionToUpdate?.dropped?.liabilities?.length || 0) === currentInstruction.correctDrops.liabilities.length;
    const hasEquityDropped = (instructionToUpdate?.dropped?.equity?.length || 0) === currentInstruction.correctDrops.equity.length;

    const isTransactionComplete = 
      (isAssetsDropRequired === hasAssetsDropped) &&
      (isLiabilitiesDropRequired === hasLiabilitiesDropped) &&
      (isEquityDropRequired === hasEquityDropped);
    
    if (isTransactionComplete) {
      updatedInstructions[currentInstructionIndex].isCompleted = true;
      setInstructions(updatedInstructions);
      if (currentInstructionIndex === instructions.length - 1) {
        endGame();
      } else {
        nextTransaction();
      }
    }
  };

  const calculateCumulativeTotals = () => {
    let assetsTotal = 0;
    let liabilitiesTotal = 0;
    let equityTotal = 0;
    const getAmount = (text: string) => {
      const match = text.match(/([+-]?\d+)/);
      return match ? parseFloat(match[1]) : 0;
    };
    
    // Sum up all completed transactions
    instructions.forEach((instruction) => {
      if (instruction.dropped) {
        instruction.dropped.assets?.forEach(item => {
          if (item.isCorrect) assetsTotal += getAmount(item.text);
        });
        instruction.dropped.liabilities?.forEach(item => {
          if (item.isCorrect) liabilitiesTotal += getAmount(item.text);
        });
        instruction.dropped.equity?.forEach(item => {
          if (item.isCorrect) equityTotal += getAmount(item.text);
        });
      }
    });
    return { assetsTotal, liabilitiesTotal, equityTotal };
  };

  const { assetsTotal, liabilitiesTotal, equityTotal } = calculateCumulativeTotals();
  const currentInstruction = instructions[currentInstructionIndex];
  const isLastInstruction = currentInstructionIndex === instructions.length - 1;
  const isGameOver = currentInstructionIndex === instructions.length || timer === 0;

  return (
    <div className="bg-white dark:bg-gray-900 text-gray-900 dark:text-gray-100 min-h-screen transition-colors duration-500 font-inter p-4 md:p-8">
      {/* Toast/Message Box */}
      <div
        className={`fixed top-5 left-1/2 -translate-x-1/2 p-4 rounded-lg shadow-xl text-center z-50 transform transition-opacity duration-300 ${toastMessage.visible ? 'opacity-100' : 'opacity-0'} ${toastMessage.isCorrect ? 'bg-green-500' : 'bg-red-500'}`}>
        {toastMessage.text} ({toastMessage.points > 0 ? '+' : ''}{toastMessage.points})
      </div>

      <div className="container mx-auto">
        <div className="flex justify-between items-center mb-6">
          <div className="flex flex-col items-center justify-center text-center">
            <h1 className="text-3xl font-bold text-center">Financial Equation Game</h1>
          </div>
          <button id="theme-toggle" className="p-2 rounded-full bg-gray-200 dark:bg-gray-800 text-gray-800 dark:text-gray-200" onClick={() => document.documentElement.classList.toggle('dark')}>
            <i className="fas fa-moon"></i>
          </button>
        </div>
        
        {/* Score and Timer */}
        <div className="flex justify-between items-center w-full mb-8">
            <div className="flex items-center space-x-2">
                <span className="font-semibold text-green-600">{translations[currentLanguage].score} {score}</span>
            </div>
            <div className="flex items-center space-x-2">
                <span className="font-semibold text-blue-600">{translations[currentLanguage].time} {timer}s</span>
            </div>
        </div>
        
        <div className="w-full h-auto">
            {/* Column Headers */}
            <div className="grid grid-cols-[1fr_1fr_0.2fr_1fr_0.2fr_1fr] border border-black dark:border-white w-full">
                <div className="text-center p-2 border-r border-black dark:border-white">
                    {translations[currentLanguage].description}
                </div>
                <div className="text-center p-2 border-r border-black dark:border-white">
                    {translations[currentLanguage].assets}
                    <div className="text-sm font-normal text-gray-600 dark:text-gray-400">(What company owns)</div>
                </div>
                <div className="flex items-center justify-center text-4xl font-extrabold dark:text-gray-100">
                    =
                </div>
                <div className="text-center p-2 border-r border-black dark:border-white">
                    {translations[currentLanguage].liabilities}
                    <div className="text-sm font-normal text-gray-600 dark:text-gray-400">(What company owes)</div>
                </div>
                <div className="flex items-center justify-center text-4xl font-extrabold dark:text-gray-100">
                    +
                </div>
                <div className="text-center p-2">
                    {translations[currentLanguage].equity}
                    <div className="text-sm font-normal text-gray-600 dark:text-gray-400">(What company pays to its owners)</div>
                </div>
            </div>

            {/* Transaction Rows */}
            <div className="w-full overflow-y-auto" style={{ maxHeight: '400px' }}>
                {instructions.map((instruction, index) => (
                    // Render a row for each instruction that has been attempted
                    (instruction.dropped?.assets?.length > 0 || instruction.dropped?.liabilities?.length > 0 || instruction.dropped?.equity?.length > 0 || index === currentInstructionIndex) && (
                        <div key={instruction.id} className="grid grid-cols-[1fr_1fr_0.2fr_1fr_0.2fr_1fr] border-b border-l border-r border-black dark:border-white w-full">
                            {/* Description */}
                            <div className="p-4 border-r border-black dark:border-white flex items-center justify-center text-center">
                                {instruction.description}
                            </div>

                            {/* Assets */}
                            <div className="p-4 border-r border-black dark:border-white flex items-center justify-center" data-zone="assets" onDragOver={(e) => e.preventDefault()} onDrop={handleDrop}>
                                {instruction.dropped?.assets?.length > 0 && instruction.dropped.assets.map((item, itemIndex) => (
                                    <div key={`${index}-assets-${itemIndex}`} className={`p-4 rounded-lg shadow-md w-32 text-center ${item.isCorrect ? 'bg-green-200 text-green-800' : 'bg-red-200 text-red-800'}`}>
                                        {item.text}
                                    </div>
                                ))}
                            </div>

                            {/* Equals */}
                            <div className="flex items-center justify-center"></div>

                            {/* Liabilities */}
                            <div className="p-4 border-r border-black dark:border-white flex items-center justify-center" data-zone="liabilities" onDragOver={(e) => e.preventDefault()} onDrop={handleDrop}>
                                {instruction.dropped?.liabilities?.length > 0 && instruction.dropped.liabilities.map((item, itemIndex) => (
                                    <div key={`${index}-liabilities-${itemIndex}`} className={`p-4 rounded-lg shadow-md w-32 text-center ${item.isCorrect ? 'bg-green-200 text-green-800' : 'bg-red-200 text-red-800'}`}>
                                        {item.text}
                                    </div>
                                ))}
                            </div>

                            {/* Plus */}
                            <div className="flex items-center justify-center"></div>

                            {/* Equity */}
                            <div className="p-4 flex items-center justify-center" data-zone="equity" onDragOver={(e) => e.preventDefault()} onDrop={handleDrop}>
                                {instruction.dropped?.equity?.length > 0 && instruction.dropped.equity.map((item, itemIndex) => (
                                    <div key={`${index}-equity-${itemIndex}`} className={`p-4 rounded-lg shadow-md w-32 text-center ${item.isCorrect ? 'bg-green-200 text-green-800' : 'bg-red-200 text-red-800'}`}>
                                        {item.text}
                                    </div>
                                ))}
                            </div>
                        </div>
                    )
                ))}
            </div>
            

            {/* Total Section */}
            <div className="grid grid-cols-[1fr_1fr_0.2fr_1fr_0.2fr_1fr] border-l border-r border-b border-black dark:border-white">
                <div className="p-2 border-r border-black dark:border-white flex items-center justify-center text-center">
                    {translations[currentLanguage].totalAssets}
                </div>
                <div className="p-2 border-r border-black dark:border-white flex items-center justify-center">
                    <div className="w-32 h-16 flex items-center justify-center border border-black dark:border-white rounded-lg shadow-md bg-white dark:bg-gray-800">
                        <span className="text-xl font-bold">{assetsTotal}</span>
                    </div>
                </div>
                <div className="flex items-center justify-center"></div>
                <div className="p-2 border-r border-black dark:border-white flex items-center justify-center">
                    <div className="w-32 h-16 flex items-center justify-center border border-black dark:border-white rounded-lg shadow-md bg-white dark:bg-gray-800">
                        <span className="text-xl font-bold">{liabilitiesTotal}</span>
                    </div>
                </div>
                <div className="flex items-center justify-center"></div>
                <div className="p-2 flex items-center justify-center">
                    <div className="w-32 h-16 flex items-center justify-center border border-black dark:border-white rounded-lg shadow-md bg-white dark:bg-gray-800">
                        <span className="text-xl font-bold">{equityTotal}</span>
                    </div>
                </div>
            </div>
        </div>


        {/* Instruction and buttons */}
        <div className="flex flex-col justify-center items-center mt-8">
            {isGameRunning && !isGameOver && currentInstruction && (
              <div className="flex flex-col items-center mb-4">
                <p className="text-xl font-medium w-full text-center">{currentInstruction.description}</p>
                <div
                    className="drag-item p-4 bg-blue-500 text-white rounded-lg shadow-md cursor-grab mt-4"
                    draggable
                    onDragStart={(e) => e.dataTransfer.setData('text/plain', currentInstruction.id)}
                >
                    {currentInstruction.draggableValue}
                </div>
              </div>
            )}

            <div className="flex justify-center">
              {!isGameRunning ? (
                <button
                  id="start-game-btn"
                  className="px-6 py-3 rounded-full text-white font-semibold transition-colors duration-300 shadow-md bg-blue-600 hover:bg-blue-700"
                  onClick={startGame}
                >
                  Start Game
                </button>
              ) : isGameOver ? (
                <div className="flex flex-col items-center text-center">
                    <h2 className={`text-2xl font-bold mb-4 ${assetsTotal === liabilitiesTotal + equityTotal ? 'text-green-600' : 'text-red-600'}`}>
                        {assetsTotal === liabilitiesTotal + equityTotal ? translations[currentLanguage].congratulations + ' 🎉' : translations[currentLanguage].failed}
                    </h2>
                    <p className="text-lg font-semibold mb-2">
                        {translations[currentLanguage].totalAssets} {assetsTotal} = {translations[currentLanguage].totalLiabilities} {liabilitiesTotal} + {translations[currentLanguage].totalEquity} {equityTotal}
                    </p>
                </div>
              ) : (
                <button
                  id="next-transaction-btn"
                  className="px-6 py-3 rounded-full text-white font-semibold transition-colors duration-300 shadow-md bg-green-600 hover:bg-green-700"
                  onClick={isLastInstruction ? endGame : nextTransaction}
                >
                  {isLastInstruction ? 'Submit' : 'Next Transaction'}
                </button>
              )}
            </div>
        </div>
      </div>
    </div>
  );
};

export default App;